source("~/padhai/thesis/main/plotting.R")
source("~/padhai/thesis/main/branching.R")
source("~/padhai/thesis/main/plotting.R")
source("~/padhai/thesis/main/branching.R")
source("~/padhai/thesis/main/plotting.R")
source("~/padhai/thesis/main/branching.R")
source("~/padhai/thesis/main/branching.R")
source("~/padhai/thesis/main/plotting.R")
source("~/padhai/thesis/main/branching.R")
source("~/padhai/thesis/main/plotting.R")
source("~/padhai/thesis/main/branching.R")
source("~/padhai/thesis/main/branching.R")
source("~/padhai/thesis/main/plotting.R")
source("~/padhai/thesis/main/branching.R")
source("~/padhai/thesis/main/plotting.R")
source("~/padhai/thesis/main/branching.R")
source("~/padhai/thesis/main/plotting.R")
source("~/padhai/thesis/main/branching.R")
source("~/padhai/thesis/main/plotting.R")
source("~/padhai/thesis/main/branching.R")
source("~/padhai/thesis/main/plotting.R")
source("~/padhai/thesis/main/branching.R")
source("~/padhai/thesis/main/plotting.R")
source("~/padhai/thesis/main/branching.R")
source("~/padhai/thesis/main/plotting.R")
source("~/padhai/thesis/main/branching.R")
source("~/padhai/thesis/main/plotting.R")
source("~/padhai/thesis/main/branching.R")
source("~/padhai/thesis/main/plotting.R")
source("~/padhai/thesis/main/branching.R")
source("~/padhai/thesis/main/plotting.R")
source("~/padhai/thesis/main/branching.R")
source("~/padhai/thesis/main/plotting.R")
source("~/padhai/thesis/main/branching.R")
source("~/padhai/thesis/main/plotting.R")
source("~/padhai/thesis/main/branching.R")
source("~/padhai/thesis/main/plotting.R")
source("~/padhai/thesis/main/branching.R")
source("~/padhai/thesis/main/plotting.R")
source("~/padhai/thesis/main/branching.R")
source("~/padhai/thesis/main/plotting.R")
source("~/padhai/thesis/main/branching.R")
source("~/padhai/thesis/main/plotting.R")
source("~/padhai/thesis/main/branching.R")
source("~/padhai/thesis/main/plotting.R")
source("~/padhai/thesis/main/branching.R")
source("~/padhai/thesis/main/plotting.R")
source("~/padhai/thesis/main/branching.R")
source("~/padhai/thesis/main/plotting.R")
source("~/padhai/thesis/main/branching.R")
source("~/padhai/thesis/main/plotting.R")
source("~/padhai/thesis/main/branching.R")
source("~/padhai/thesis/main/plotting.R")
source("~/padhai/thesis/main/branching.R")
source("~/padhai/thesis/main/plotting.R")
source("~/padhai/thesis/main/branching.R")
source("~/padhai/thesis/main/plotting.R")
source("~/padhai/thesis/main/branching.R")
source("~/padhai/thesis/main/plotting.R")
source("~/padhai/thesis/main/branching.R")
source("~/padhai/thesis/main/plotting.R")
source("~/padhai/thesis/main/plotting.R")
source("~/padhai/thesis/main/branching.R")
source("~/padhai/thesis/main/plotting.R")
clones
View(clones)
source("~/padhai/thesis/main/branching.R")
source("~/padhai/thesis/main/plotting.R")
source("~/padhai/thesis/main/branching.R")
source("~/padhai/thesis/main/plotting.R")
source("~/padhai/thesis/main/branching.R")
source("~/padhai/thesis/main/branching.R")
source("~/padhai/thesis/main/branching.R")
source("~/padhai/thesis/main/branching.R")
source("~/padhai/thesis/main/plotting.R")
source("~/padhai/thesis/main/branching.R")
source("~/padhai/thesis/main/plotting.R")
source("~/padhai/thesis/main/branching.R")
source("~/padhai/thesis/main/branching.R")
source("~/padhai/thesis/main/branching.R")
source("~/padhai/thesis/main/branching.R")
source("~/padhai/thesis/main/plotting.R")
source("~/padhai/thesis/main/branching.R")
source("~/padhai/thesis/main/plotting.R")
source("~/padhai/thesis/main/branching.R")
source("~/padhai/thesis/main/plotting.R")
source("~/padhai/thesis/main/branching.R")
source("~/padhai/thesis/main/plotting.R")
source("~/padhai/thesis/main/branching.R")
source("~/padhai/thesis/main/plotting.R")
source("~/padhai/thesis/main/branching.R")
source("~/padhai/thesis/main/plotting.R")
source("~/padhai/thesis/main/branching.R")
source("~/padhai/thesis/main/plotting.R")
source("~/padhai/thesis/main/branching.R")
source("~/padhai/thesis/main/plotting.R")
source("~/padhai/thesis/main/branching.R")
source("~/padhai/thesis/main/plotting.R")
source("~/padhai/thesis/main/plotting.R")
source("~/padhai/thesis/main/plotting.R")
source("~/padhai/thesis/main/plotting.R")
source("~/padhai/thesis/main/plotting.R")
source("~/padhai/thesis/main/branching.R")
source("~/padhai/thesis/main/plotting.R")
source("~/padhai/thesis/main/plotting.R")
source("~/padhai/thesis/main/branching.R")
source("~/padhai/thesis/main/branching.R")
source("~/padhai/thesis/main/plotting.R")
source("~/padhai/thesis/main/branching.R")
source("~/padhai/thesis/main/plotting.R")
source("~/padhai/thesis/main/branching.R")
source("~/padhai/thesis/main/plotting.R")
source("~/padhai/thesis/main/branching.R")
source("~/padhai/thesis/main/plotting.R")
source("~/padhai/thesis/main/branching.R")
source("~/padhai/thesis/main/plotting.R")
source("~/padhai/thesis/main/plotting.R")
source("~/padhai/thesis/main/plotting.R")
source("~/padhai/thesis/main/branching.R")
install.packages("stringi")
suppressPackageStartupMessages({
library(ggplot2)
library(dplyr)
library(reshape2)
library(tidyverse)
library(latex2exp)
library(deSolve)
})
# setting the theme for plots
theme_set(theme_linedraw())
# directory with simulation data
dirname <- "../../code/ET-new/simulation-data/fig_1_analytical_comparison/1mil_2.2"
# number of runs in the simulations, can be checked in the params.csv files
n_runs <- 500
# extracting config data (list of all parameters with ArrayTaskIDs)
data <- read.table(file = paste(dir,"config.txt",sep = "/"), sep = '\t', header = TRUE)
# extracting extinction probabilities from results file for each parameter set
results <- data.frame()
for(i in data$ArrayTaskID){
probs <- read.csv(paste(dir, i, "results.txt", sep = "/"), header = FALSE)
probs <- probs %>% remove_rownames %>% column_to_rownames(var="V1")
results <- rbind(results, c(probs[2,], probs[3,], probs[4,]))
}
# extracting config data (list of all parameters with ArrayTaskIDs)
data <- read.table(file = paste(dir,"config.txt",sep = "/"), sep = '\t', header = TRUE)
# extracting config data (list of all parameters with ArrayTaskIDs)
data <- read.table(file = paste(dirname,"config.txt",sep = "/"), sep = '\t', header = TRUE)
getwd
getwd()
# directory with simulation data
dirname <- "padhai/extinction-therapy/code/ET-new/simulation-data/fig_1_analytical_comparison/1mil_2.2"
# number of runs in the simulations, can be checked in the params.csv files
n_runs <- 500
# extracting config data (list of all parameters with ArrayTaskIDs)
data <- read.table(file = paste(dirname,"config.txt",sep = "/"), sep = '\t', header = TRUE)
# extracting extinction probabilities from results file for each parameter set
results <- data.frame()
for(i in data$ArrayTaskID){
probs <- read.csv(paste(dir, i, "results.txt", sep = "/"), header = FALSE)
probs <- probs %>% remove_rownames %>% column_to_rownames(var="V1")
results <- rbind(results, c(probs[2,], probs[3,], probs[4,]))
}
colnames(results) <- c("extinction", "progression", "persistence")
for(i in data$ArrayTaskID){
probs <- read.csv(paste(dirname, i, "results.txt", sep = "/"), header = FALSE)
probs <- probs %>% remove_rownames %>% column_to_rownames(var="V1")
results <- rbind(results, c(probs[2,], probs[3,], probs[4,]))
}
colnames(results) <- c("extinction", "progression", "persistence")
# organising data and calculating standard error
data <- cbind(data, results)
data$SE <- sqrt(data$extinction*(1 - data$extinction)/n_runs)
View(data)
which.max(data$extinction)
data[which.max(data$extinction),]$n_tau
# point of max extinction probability
maxn <- data[which(data$extinction==max(data$extinction)),]$n_tau
maxn
# point of max extinction probability
maxn <- data[which(data$extinction==min(data$extinction)),]$n_tau
maxn
data[which.min(data$extinction),]$n_tau
data[1]
data[1,2]
data[1,5]
data[1,6]
data[1,]
data[2,]
data[2,2]
data[2,6]
data[which.min(extinction),]$n_tau
# point of max extinction probability
maxn <- data[which.max(data$extinction),]$n_tau
# analytical model params
ord <- 100 # order of initial population relative to 10^4
nr2 <- 1*ord # initial R_2 population
nr1 <- 1*ord # initial R_1 population
nr12 <- 0 # initial R_1,2 population
ns <- 10000*ord # initial S population
N0 <- ns+nr1+nr2+nr12
K <- N0 # carrying capacity
p2 <- 0.25 # probability of mutating from S --> R2 (given mutation occurs)
p1 <- 0.25 # probability of mutating from S --> R1 (given mutation occurs)
mu <- 0.00001 # total mutation probability in E_1
mu2 <- 0.00001 # total mutation probability in E_2
a1 <- mu*p1
a2 <- mu*p2
a1_2 <- mu2*p1
a2_2 <- mu2*p2
D <- 2.0 # treatment level in E_1
D2 <- D # treatment level in E_2
b <- 1 # intrinsic birth rate
d <- 0.1 # intrinsic death rate
s <- b-d
c <- 0.5 # cost of resistance
r <- s-c
pi2 <- 1-exp(-2*(r)/(b + d - c)) # establishment probability
# growth equations
grow_E1 <- function(t, init_state, growth_params){
with(as.list(c(init_state, growth_params)),{
dS = S*(gs*(1-(S+R1+R2+R12)/K) - D) - S*(a1+a2)
dR1 = R1*gr*(1-(S+R1+R2+R12)/K) - R1*a2 + S*a1
dR2 = R2*(gr*(1-(S+R1+R2+R12)/K) - D) - R2*a1 + S*a2
dR12 = R12*gr*(1-(S+R1+R2+R12)/K) + R2*a1 + R1*a2
list(c(dS,dR1,dR2,dR12))
}) # end with(as.list...
}
grow_E2 <- function(t, init_state, growth_params){
with(as.list(c(init_state, growth_params)),{
dS = S*(gs*(1-(S+R1)/K) - D) - S*a1
dR1 = R1*(gr*(1-(S+R1)/K) - D) + S*a1
list(c(dS,dR1))
}) # end with(as.list...
}
# growth in E1
growth_params <- c(K=K, D=D, gs=s, gr=r, a1=a1, a2=a2)
init_state_E1 <- c(S=ns, R1=nr1, R2=nr2, R12=nr12)
times_E1 <- seq(0,500,by=0.01)
out_E1 <- ode(y=init_state_E1, times=times_E1, func=grow_E1, parms=growth_params)
time <- out_E1[,"time"]
S <- out_E1[,"S"]
R1 <- out_E1[,"R1"]
R2 <- out_E1[,"R2"]
R12 <- out_E1[,"R12"]
T_E1 <- S+R1+R2+R12
nmin_idx <- which.min(T_E1)
T_E1_premin <- T_E1[1:nmin_idx]
nmin_num <- min(T_E1)
results <- c()
step <- 10000
ntrange <- seq(nmin_num,N0,step)
install.packages("txtProgressBar")
source("~/padhai/extinction-therapy/github-repo/plotting/analytical_and_simdata.R", echo=TRUE)
source("~/padhai/extinction-therapy/github-repo/plotting/analytical_and_simdata.R", echo=TRUE)
source("~/padhai/extinction-therapy/github-repo/plotting/analytical_and_simdata.R", echo=TRUE)
epplot <- ggplot(data=data, aes(y=extinction))+
geom_point(aes(x=n_tau), size=3)+
#geom_vline(xintercept = maxn, lty=2,lwd=2,alpha=0.5)+
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
text=element_text(size=rel(6)),
aspect.ratio = 1)+
labs(x=TeX("N(tau)"), y=TeX("$P_{E}$"))+
ylim(c(0,1))+
geom_errorbar(aes(x=n_tau, ymin = extinction - 1.96 * SE, ymax = extinction + 1.96 * SE)) # binomial proportion 95% confidence interval
# plotting the analytical prediction
epplot <- epplot+
geom_line(data=PE_data[which(PE_data$n_tau>-1),],
aes(x=n_tau, y=PE), lwd=1, alpha=0.7)+
geom_vline(xintercept = nmin, lty=2, lwd=1.5, color='red', alpha=0.7)+
geom_hline(yintercept = 0, col='grey50')+
scale_x_continuous(limits = c(0, nmax), breaks = c(0, 0.5*nmax, nmax))+
scale_y_continuous(limits=c(0,1), breaks=c(0,0.5,1))+
theme(aspect.ratio = 1, legend.position = "",
text = element_text(size=rel(6)))
pdf(paste(dirname,"test.pdf",sep = "/"), height = 5, width = 6)
print(epplot)
dev.off()
source("~/padhai/extinction-therapy/github-repo/plotting/analytical_and_simdata.R", echo=TRUE)
setwd("~/padhai/extinction-therapy/github-repo/plotting")
source("~/padhai/extinction-therapy/github-repo/plotting/analytical_heatmaps/analytical_heatmap.R", echo=TRUE)
source("~/padhai/extinction-therapy/github-repo/plotting/analytical_heatmaps/analytical_heatmap.R", echo=TRUE)
getpwd()
getwd()
PE_data <- cbind(grid_data,values)
colnames(PE_data) <- c("ntau", "K", "pe")
write.csv(PE_data, file = "analytical_heatmaps/data/heatmap_K/out.csv", row.names = FALSE)
var_names <- ls()
variables_to_save <- c("K")  # add variables to save
variables_to_save <- intersect(variables_to_save, var_names)
var_data <- data.frame(t(sapply(variables_to_save, get)))
write.csv(var_data, file = "analytical_heatmaps/data/heatmap_K/params.csv", row.names = FALSE)
heatmap <- ggplot(data=PE_data)+
geom_contour_filled(aes(x=ntau, y=K, z=pe))+
xlim(c(0,50000))+
#ylim(c(1, 3))+
xlab(TeX("$N(\tau)$"))+
ylab(TeX("$K$"))+
theme(aspect.ratio = 1,
legend.position = "",
text=element_text(size = rel(5)),
panel.grid.major = element_blank())
pdf(file = "analytical_heatmaps/data/heatmap_K/plot.pdf", width=6, height = 5)
print(heatmap)
dev.off()
heatmap <- ggplot(data=PE_data)+
geom_contour_filled(aes(x=ntau, y=K, z=pe))+
xlim(c(0,50000))+
#ylim(c(1, 3))+
xlab(TeX("$N(tau)$"))+
ylab(TeX("$K$"))+
theme(aspect.ratio = 1,
legend.position = "",
text=element_text(size = rel(5)),
panel.grid.major = element_blank())
pdf(file = "analytical_heatmaps/data/heatmap_K/plot.pdf", width=6, height = 5)
print(heatmap)
dev.off()
heatmap <- ggplot(data=PE_data)+
geom_contour_filled(aes(x=ntau, y=K, z=pe))+
xlim(c(0,50000))+
#ylim(c(1, 3))+
xlab(TeX("$N(tau)$"))+
ylab(TeX("$K$"))+
theme(aspect.ratio = 1,
legend.position = "",
text=element_text(size = rel(5)),
panel.grid.major = element_blank())
pdf(file = "analytical_heatmaps/plots/heatmap_K.pdf", width=6, height = 5)
print(heatmap)
dev.off()
source("~/padhai/extinction-therapy/github-repo/plotting/analytical_heatmaps/analytical_heatmap.R", echo=TRUE)
c
var_names <- ls()
variables_to_save <- c("K")  # add variables to save
variables_to_save <- intersect(variables_to_save, var_names)
var_data <- data.frame(t(sapply(variables_to_save, get)))
write.csv(var_data, file = "analytical_heatmaps/data/heatmap_c/params.csv", row.names = FALSE)
heatmap <- ggplot(data=PE_data)+
geom_contour_filled(aes(x=ntau, y=c, z=pe))+
xlim(c(0,50000))+
#ylim(c(1, 3))+
xlab(TeX("$N(tau)$"))+
ylab(TeX("$c$"))+
theme(aspect.ratio = 1,
legend.position = "",
text=element_text(size = rel(5)),
panel.grid.major = element_blank())
pdf(file = "analytical_heatmaps/plots/heatmap_c.pdf", width=6, height = 5)
print(heatmap)
dev.off()
var_names <- ls()
variables_to_save <- c("K","D")  # add variables to save
variables_to_save <- intersect(variables_to_save, var_names)
var_data <- data.frame(t(sapply(variables_to_save, get)))
write.csv(var_data, file = "analytical_heatmaps/data/heatmap_c/params.csv", row.names = FALSE)
heatmap <- ggplot(data=PE_data)+
geom_contour_filled(aes(x=ntau, y=c, z=pe))+
xlim(c(0,50000))+
#ylim(c(1, 3))+
xlab(TeX("$N(tau)$"))+
ylab(TeX("$c$"))+
theme(aspect.ratio = 1,
legend.position = "",
text=element_text(size = rel(5)),
panel.grid.major = element_blank())
pdf(file = "analytical_heatmaps/plots/heatmap_c.pdf", width=6, height = 5)
print(heatmap)
dev.off()
var_names <- ls()
variables_to_save <- c("K","D","D2","b","d","ord")  # add variables to save
variables_to_save <- intersect(variables_to_save, var_names)
var_data <- data.frame(t(sapply(variables_to_save, get)))
write.csv(var_data, file = "analytical_heatmaps/data/heatmap_c/params.csv", row.names = FALSE)
source("~/padhai/extinction-therapy/github-repo/plotting/analytical_heatmaps/analytical_heatmap.R", echo=TRUE)
var_names <- ls()
variables_to_save <- c("K","D","D2","c","d","ord")  # add variables to save
variables_to_save <- intersect(variables_to_save, var_names)
var_data <- data.frame(t(sapply(variables_to_save, get)))
write.csv(var_data, file = "analytical_heatmaps/data/heatmap_b/params.csv", row.names = FALSE) # (***)
var_data
c
var_names <- ls()
variables_to_save <- c("K","D","D2","d","ord")  # add variables to save
variables_to_save <- intersect(variables_to_save, var_names)
var_data <- data.frame(t(sapply(variables_to_save, get)))
write.csv(var_data, file = "analytical_heatmaps/data/heatmap_b/params.csv", row.names = FALSE) # (***)
var_data
var_names <- ls()
variables_to_save <- c("K","D","D2","c","d","ord")  # add variables to save
variables_to_save <- intersect(variables_to_save, var_names)
var_data <- data.frame(t(sapply(variables_to_save, get)))
write.csv(var_data, file = "analytical_heatmaps/data/heatmap_b/params.csv", row.names = FALSE) # (***)
variables_to_save
var_names
variables_to_save
var_data
c <- 0.5 # cost of resistance
var_names <- ls()
variables_to_save <- c("K","D","D2","c","d","ord")  # add variables to save
variables_to_save <- intersect(variables_to_save, var_names)
var_data <- data.frame(t(sapply(variables_to_save, get)))
write.csv(var_data, file = "analytical_heatmaps/data/heatmap_b/params.csv", row.names = FALSE) # (***)
var_data
sapply(variables_to_save, get)
get(x = "c")
get(x = "d")
# define growth functions
grow_E1 <- function(t, init_state, growth_params){
with(as.list(c(init_state, growth_params)),{
dS = S*(gs*(1-(S+R1+R2+R12)/K) - D) - S*(a1+a2)
dR1 = R1*gr*(1-(S+R1+R2+R12)/K) - R1*a2 + S*a1
dR2 = R2*(gr*(1-(S+R1+R2+R12)/K) - D) - R2*a1 + S*a2
dR12 = R12*gr*(1-(S+R1+R2+R12)/K) + R2*a1 + R1*a2
list(c(dS,dR1,dR2,dR12))
}) # end with(as.list...
}
cost <- 0.5 # cost of resistance
var_names <- ls()
variables_to_save <- c("K","D","D2","cost","d","ord")  # add variables to save
variables_to_save <- intersect(variables_to_save, var_names)
var_data <- data.frame(t(sapply(variables_to_save, get)))
write.csv(var_data, file = "analytical_heatmaps/data/heatmap_b/params.csv", row.names = FALSE) # (***)
heatmap <- ggplot(data=PE_data)+
geom_contour_filled(aes(x=ntau, y=b, z=pe))+ # (***)
xlim(c(0,50000))+
#ylim(c(1, 3))+
xlab(TeX("$N(tau)$"))+
ylab(TeX("$b$"))+
theme(aspect.ratio = 1,
legend.position = "",
text=element_text(size = rel(5)),
panel.grid.major = element_blank())
pdf(file = "analytical_heatmaps/plots/heatmap_b.pdf", width=6, height = 5) # (***)
print(heatmap)
dev.off()
suppressPackageStartupMessages({
library(ggplot2)
library(dplyr)
library(reshape2)
library(tidyverse)
library(latex2exp)
library(deSolve)
library(metR)
})
# In this script, the y-axis parameter is b (intrinsic birth rate)
# The x-axis parameter is always N(tau)
theme_set(theme_linedraw())
## change the relevant parameters here
ord <- 100 # order of initial population relative to 10^4
nr2 <- 1*ord # initial R_2 population
nr1 <- 1*ord # initial R_1 population
nr12 <- 0 # initial R_1,2 population
ns <- 10000*ord # initial S population
N0 <- ns+nr1+nr2+nr12
K <- N0 # carrying capacity
p2 <- 0.25 # probability of mutating from S --> R2 (given mutation occurs)
p1 <- 0.25 # probability of mutating from S --> R1 (given mutation occurs)
mu <- 0.00001 # total mutation probability in E_1
mu2 <- 0.00001 # total mutation probability in E_2
a1 <- mu*p1
a2 <- mu*p2
a1_2 <- mu2*p1
a2_2 <- mu2*p2
D <- 2.0 # treatment level in E_1
D2 <- D # treatment level in E_2
b <- 1 # intrinsic birth rate
d <- 0.1 # intrinsic death rate
s <- b-d
cost <- 0.5 # cost of resistance
r <- s-cost
pi2 <- 1-exp(-2*(r)/(b + d - cost)) # establishment probability
# edit this line with the parameter to plot
param <<- b
param <- 2
b
b <- 2
param
b <- 3
param
# edit this line with the parameter to plot
param <<- b
link_variables <- function(original_var) {
return(original_var)
}
# edit this line with the parameter to plot
param <<- link_variables(b)
param
param <- 10
b
b
param
duplicate(b)
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
library(rlang)
suppressPackageStartupMessages({
library(ggplot2)
library(dplyr)
library(reshape2)
library(tidyverse)
library(latex2exp)
library(deSolve)
library(metR)
library(rlang)
})
library(rlang)
duplicate(b)
library(rlang)
